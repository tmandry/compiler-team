<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Rust Lang - Compiler Team</title><link>https://rust-lang.github.io/compiler-team/</link><description>Recent content in Introduction on Rust Lang - Compiler Team</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://rust-lang.github.io/compiler-team/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-11-01-streaming-dep-graph-proposal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-11-01-streaming-dep-graph-proposal/</guid><description>&amp;ldquo;Streaming dep graph&amp;rdquo; proposal Summary of the proposal Currently, incremental compilation begins by loading the old dependency graph and then &amp;ndash; as execution proceeds &amp;ndash; building a new dependency graph in memory. At the end of compilation, this new graph is written out.
PR #60035 proposes to change how the new graph is handled. Instead of building the graph in memory and writing it out at the end, we &amp;ldquo;stream&amp;rdquo; out a series of changes to the dep-graph as we go.</description></item><item><title>2018-10-26</title><link>https://rust-lang.github.io/compiler-team/minutes/steering-meeting/2018-10-26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/steering-meeting/2018-10-26/</guid><description>2018-10-26 We had our first T-compiler steering meeting today! What follows is a summary of the major points raised during the discussion. If you&amp;rsquo;d like to read the detailed minutes, please see the Zulip chat log. I&amp;rsquo;ll insert links here and there into that log where appropriate, if you want to see the original comment.
To start, before the meeting we did a survey asking folks what they thought worked well and what needed improvement in and around with the compiler team.</description></item><item><title>2018.11.16</title><link>https://rust-lang.github.io/compiler-team/minutes/steering-meeting/2018-11-16/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/steering-meeting/2018-11-16/</guid><description>2018.11.16 The topic of today&amp;rsquo;s steering meeting was future planning. Specifically, we were looking at some of the ideas we&amp;rsquo;ve had for major initiatives and trying to drill into them and make them more concrete. You can read the full thread over on Zulip.
We began by observing that the ultimate decisions we make here will be very influenced by the number of leaders we can find, and what they want to do, and ultimately decided to focus first on the technical angle before thinking about what leaders we have etc.</description></item><item><title>2018.12.14</title><link>https://rust-lang.github.io/compiler-team/minutes/steering-meeting/2018-12-14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/steering-meeting/2018-12-14/</guid><description>2018.12.14 The steering meeting was focused on mentoring. Some of the prompting questions:
How can we help move people from &amp;ldquo;working group participant&amp;rdquo; to &amp;ldquo;full-fledged team member&amp;rdquo;? How can we reduce the &amp;ldquo;bus factor&amp;rdquo; for cricial modules like the type checker, type resolver, etc? A summary of the major points raised follows. If you prefer, you can read the full transcript on Zulip.
Major points: Mentoring it seems good to try and list out the parts of the compiler and who is an expert in each one, perhaps in some kind of &amp;ldquo;introduction to the compiler team&amp;rdquo; page on the repository this can help identify where to direct your questions about code X but also where we need to increase the number of knowledgable people it would be great if we had an organized off-ramp system for folks who have been active in a working group and are looking to broaden their knowledge maybe we can pair up such folks with someone more experienced this is a different sort of mentoring, since active people from a WG are already familiar with how the compiler works, and thus able to work at a higher level we need to find a way to make it easier to find &amp;ldquo;intermediate-level mentoring opportunities&amp;rdquo;.</description></item><item><title>2019-12-06 end-to-end query PRs</title><link>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-12-06-end-to-end-query-PRs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-12-06-end-to-end-query-PRs/</guid><description>Design Meeting 2019-12-06 &amp;ndash; librustc_interface queries Links Zulip topic of the discussion Compiler team issue Pre-design meeting Zulip topic Internals thread with descriptions of PRs Background Goal is end-to-end queries Benefits: Simpler overall model Incremental extending back to parsing mw has done measurements suggesting that on larger crates some 40% of the compilation time comes from Parallel compilation would be more effective, if done on the basis of queries Agenda Tough to frame:) Most important question to settle is what overall stategy we plan to take Do we want to try and land / rebase these PRs?</description></item><item><title>2019-12-20 major changes process</title><link>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-12-20-major-change-process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-12-20-major-change-process/</guid><description>Major Change Process Zulip thread Summary We want some kind of system where people advertise changes that they are making or plan to make and the team can give high-level feedback early and &amp;ndash; if we decide to go with the change &amp;ndash; we can ensure there is a reviewer beforehand This document describes motivations and a specific &amp;ldquo;early draft&amp;rdquo; proposal Motivations Proposal is to add some sort of notification / lightweight process before making major changes.</description></item><item><title>2019.01.04</title><link>https://rust-lang.github.io/compiler-team/minutes/steering-meeting/2019-01-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/steering-meeting/2019-01-04/</guid><description>2019.01.04 Zulip topic
We discussed the upcoming Rust All Hands. We have a HackMd document that lists a bunch of ideas for what to talk about, but mostly we talked about how to structure the meeting itself.
We summarized how the All Hands was structured last year: basically meetings focused around particular topics, with the team (and others) mostly in a kind of semi-circle or around a whiteboard.
One of the ideas we had for this year is that we could have some sessions that are just focused on explaining how a particular area of the code works, which could help people unfamiliar with an area get up to speed.</description></item><item><title>2019.01.17</title><link>https://rust-lang.github.io/compiler-team/minutes/steering-meeting/2019-01-17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/steering-meeting/2019-01-17/</guid><description>2019.01.17 Zulip topic
We discussed the upcoming Rust All Hands.
One of the first things we focused on is trying to get consensus about what the P1 Problems are that we are aiming to tackle. Our goal is to have this list complete before the all hands. Our initial list looked like this:
compilation time better compilation time investigation tools/analysis this should work in cooperation with cargo, so we can see whole story rls, completions “too hard to do anything” — technical debt “too hard to find people to do things” — organizational debt hard to learn, monolithic architecture poorly documented long compilation times, memory requirements Looking at it, we realized a few things:</description></item><item><title>2019.03.01</title><link>https://rust-lang.github.io/compiler-team/minutes/steering-meeting/2019-03-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/steering-meeting/2019-03-01/</guid><description>2019.03.01 Zulip topic
Before the meeting started, @nikomatsakis proposed an agenda and linked to a document to collect agenda ideas for future meetings.
Also, @mw asked about discussing the policy for out-of-tree compiler crates (expanding on discussions from the All Hands&amp;rsquo; organizational meeting), a draft for which was already in-progress by @davidtwco.
The meeting commenced with a call for involvement in the RLS 2.0 working group led by @matklad as sharing expertise between the RLS 2.</description></item><item><title>2019.03.05 - Roadmap plan</title><link>https://rust-lang.github.io/compiler-team/working-groups/rfc-2229/minutes/2019.03.05-roadmap-plan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/rfc-2229/minutes/2019.03.05-roadmap-plan/</guid><description> We chalked out the detailed roadmap for the working group. We also discussed how to addressed the test failures caused by the PRs this and this. The solution for the same can he found under the section Error Message here. The recording for the entire meeting can be found here.</description></item><item><title>2019.03.22</title><link>https://rust-lang.github.io/compiler-team/minutes/steering-meeting/2019-03-22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/steering-meeting/2019-03-22/</guid><description>2019.03.22 Zulip topic.
Announcements oli-obk mentions that wg-diagnostics is planning to use the annotate-snippets crate within rustc. nikomatsakis is planning, as part of the @WG-meta working group, an RFC that will propose more intermediate levels for the compiler team to recognize committed, regular contributors. Zoxc almost has a series of PRs pushing queries all the way back to parsing. davidtwco has, after numerous attempts, managed to produce a have a working branch that unblocks RFC 2008.</description></item><item><title>2019.04.11</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-04-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-04-11/</guid><description>2019-04-11 Volunteers wanted seeking help on resolving &amp;ldquo;[firefox] error: relocation refers to local symbol &amp;ldquo;&amp;rdquo; [12], which is defined in a discarded section&amp;rdquo;
seeking help on resolving &amp;ldquo;Compiler panic with generic-typed nested closures&amp;rdquo;
Backport decisions No backport decisions were made at this meeting because there were no PRs nominated for backport. Working group sync wg-mir-opt The current goal is to make the MIR Place data structure non-recursive (Issue #52708).</description></item><item><title>2019.04.12</title><link>https://rust-lang.github.io/compiler-team/minutes/steering-meeting/2019-04-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/steering-meeting/2019-04-12/</guid><description>2019.04.12 Zulip topic.
Announcements nikomatsakis has opened a PR with a draft RFC on the compiler-team repository. This RFC describes adding a new level (&amp;ldquo;compiler team contributors&amp;rdquo;) to recognize people who have been contributing regularly. It also tries to document a few things about members etc. Please give it a read! eddyb is nearing completion on their work on the symbol naming revamp. It might even offer some performance improvements.</description></item><item><title>2019.04.18</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-04-18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-04-18/</guid><description>2019-04-18 Volunteers wanted No issues discussed this week. Backport decisions There were no beta backport nominations this week.
&amp;ldquo;Use informational target machine for metadata&amp;rdquo; (#58605) was nominated for backport to stable.
Nomination was declined Working group sync wg-llvm wg-llvm is working on optimizing overflow intrinsics with add and sub instructions.
A PR (#59546) has also been opened to fix a long standing unsoundness issue.</description></item><item><title>2019.04.25</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-04-25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-04-25/</guid><description>2019-04-25 Volunteers wanted Somebody needed to reduce #60136 Somebody needed to write documentation #60059 Backport decisions &amp;ldquo;Temporarily accept [i|u][32|size] suffixes on a tuple index and warn&amp;rdquo; #60186
Accepted &amp;ldquo;Revert &amp;ldquo;compile crates under test w/ -Zemit-stack-sizes&amp;rdquo; #59911
Accepted Working group sync wg-rfc-2229 RFC 2229 is a proposal to change how closures capture variables. Instead of capturing the complete variable when a part of it is used (ie foo.</description></item><item><title>2019.05.02</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-05-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-05-02/</guid><description>2019-05-02 Volunteers wanted call for assistance: Does someone have an ARM (and maybe also MUSL?) host they could use to try to replicate &amp;ldquo;Stable rustc always panics on arm/musl&amp;rdquo; Backport decisions There were no beta- nor stable-nominations for backport. Working group sync wg-meta The compiler contributor RFC is in FCP and should be merged soon.
They are trying to get some sort of &amp;ldquo;design meeting&amp;rdquo; up and going.</description></item><item><title>2019.05.09</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-05-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-05-09/</guid><description>2019-05-09 Volunteers wanted compiler panic &amp;ldquo;randomly&amp;rdquo; with incremental build (#60629)
Help is wanted to reproduce the issue Regression: Typemap type mismatch in 1.34.0+ (#60375)
Help is wanted to narrow down the problem Backport decisions save-analysis: Fix ICE when processing associated constant (#60649) Backport accepted Working group sync wg-nll NLL migration mode is enabled on Rust 2015.
The next goal is to remove the old AST-based borrow checker.</description></item><item><title>2019.05.10</title><link>https://rust-lang.github.io/compiler-team/working-groups/parallel-rustc/minutes/2019.05.10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/parallel-rustc/minutes/2019.05.10/</guid><description>2019.05.10 Zulip topic.
Plan for parallel-rustc Gather the performance data of the feature internally Make a &amp;ldquo;go/no-go&amp;rdquo; decision based on the data Overall conclusions The overall conclusions was that before shipping we should improve the documentation. To that end, we are trying to gather major design questions in a hackmd document. Here is a link to the start of a discussion about documentation.
Gathered data The most important data on our plan are recorded on hackmd.</description></item><item><title>2019.05.16</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-05-16/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-05-16/</guid><description>2019-05-16 Volunteers wanted request for investigation: &amp;ldquo;Compiler panic with generic-typed nested closures&amp;rdquo; (#59494)
request for investigation: &amp;ldquo;Exponential compile-time and type_length_limit blowup when nesting closure wrappers&amp;rdquo; (#54540)
eddyb has excellent notes here on the fundamental problem request for investigation: &amp;ldquo;llvm lint: &amp;ldquo;Undefined behavior: Call argument type mismatches callee parameter type&amp;rdquo; with mixing debug and release&amp;rdquo; (#48310)
specifically, we need to resolve whether this is in fact an LLVM bug request for investigation: &amp;ldquo;ICE with unsized associated type&amp;rdquo; (#60431)</description></item><item><title>2019.05.23</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-05-23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-05-23/</guid><description>2019-05-23 Volunteers wanted No issues discussed this week. Backport decisions &amp;ldquo;Fix ICE with inconsistent macro matchers&amp;rdquo; (#61046)
Backport accepted &amp;ldquo;debuginfo: Revert to old/more verbose behavior for -Cdebuginfo=1&amp;rdquo; (#61007)
Backport accepted Working group sync wg-pgo PGO stands for Profiler Guided Optimization.
Code is instrumented and then run. The profilng data gathered at runtime is then used in subsequent compilations to guide optimizations.</description></item><item><title>2019.06.06</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-06-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-06-06/</guid><description>2019-06-06 Volunteers wanted No issues discussed this week. Backport decisions Fix regression 61475 #61500 Backport approved Turn turbo :fish: :ice_cream: into an error #61189 Backport approved Fix overflowing literal lint in loops #61098 Backport approved Fix more escaping ReScopes #60765 Backport approved Constrain all regions in the concrete type for an opaque type #60449 Backport approved Working group sync wg-mir-opt const propagation (by Wesley Wiser) on mir opt level 2</description></item><item><title>2019.06.13</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-06-13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-06-13/</guid><description>2019-06-13 Volunteers wanted No issues discussed this week. Backport decisions Handle index out of bound errors during const eval without panic #61598 Approved for beta backport. Working group sync wg-llvm Nikita Popov fixed a codegen issue with LLVM float min/max intrinsics on X86.
This allowed varkor to switch our min/max functions to use those intrinsics.
Nikita Popov is working on getting CVP nowrap inference reenabled in LLVM.</description></item><item><title>2019.06.20</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-06-20/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-06-20/</guid><description>2019-06-20 Volunteers wanted No issues discussed this week. Backport decisions Beta: &amp;ldquo;resolve: Temporarily make panic available with no_implicit_prelude&amp;rdquo; #61971
Backport accepted Beta: &amp;ldquo;Fix ICE involving mut references&amp;rdquo; #61947
Backport accepted Beta: &amp;ldquo;rustc_typeck: correctly compute Substs for Res::SelfCtor.&amp;rdquo; #61896
Backport accepted Beta: &amp;ldquo;Fix rust-lldb wrapper scripts.&amp;rdquo; #61827
Backport declined Beta: &amp;ldquo;Fix cfg(test) build for x86_64-fortanix-unknown-sgx&amp;rdquo; #61503</description></item><item><title>2019.06.27</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-06-27/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-06-27/</guid><description>2019-06-27 The meeting largely consisted of discussion of a few nominated issues:
Rustdoc recursion limit issue
Assigned to @nagisa Incorrect span / broken rustfix: help: use dyn: dyn #[dom_struct]
@davidtwco is assigned and working on a fix. Soundness hole in pattern matching on enums with an uninhabited variant
Assigned to @eddyb. Self as default type isnt typechecked
Under discussion at a future T-Lang meeting.</description></item><item><title>2019.07.04</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-07-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-07-04/</guid><description>2019-07-04 Volunteers wanted No issues discussed this week. Backport decisions There were no backport nominations this week. Working group sync wg-meta
Conferences, Mozilla All-Hands, and other activities have been keeping members of the group busy recently. So there&amp;rsquo;s been a slight stall in activity.
The compiler team website is nearly completed thanks to @Federico Carrone and @catalinasy!
Link to full discussion</description></item><item><title>2019.07.11</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-07-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-07-11/</guid><description>2019-07-11 Volunteers wanted No issues discussed this week. Backport nominations Raise the default recursion limit to 128
Approved for beta backport Fix ICEs when Self is used in type aliases
Approved for beta backport Emit warning when trying to use PGO in conjunction with unwinding on Windows
On hold while @wesleywiser looks into alternative approaches Working group sync wg-pipelining</description></item><item><title>2019.07.18</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-07-18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-07-18/</guid><description>2019-07-18 Volunteers wanted No issues discussed this week. Backport nominations Fix #62660
Approved for beta backport Declined for stable backport Cancel unemitted diagnostics during error recovery
Approved for beta backport Handle errors during error recovery gracefully
Approved for beta backport Correctly break out of recovery loop
Approved for beta backport Declined for stable backport Emit warning when trying to use PGO in conjunction with unwinding on Windows</description></item><item><title>2019.07.18</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-07-25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-07-25/</guid><description>2019-07-25 Volunteers wanted #60297 - we are looking for someone with access to ARM/musl to help debug this
#62896 and #62932 - there are some embedded failures, quite possibly related to LLVM, that could use bisection
Backport nominations Make the parser TokenStream more resilient after mismatched delimiter recovery Approved for beta backport Working group sync No working group sync this week.</description></item><item><title>2019.08.01</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-08-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-08-01/</guid><description>2019-08-01 Volunteers wanted No issues discussed this week.
Backport decisions There were no pending backport decisions this week.
Working group sync No working group sync this week.</description></item><item><title>2019.08.15</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-08-15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-08-15/</guid><description>2019-08-15 Volunteers wanted #60297 - we are looking for someone with access to ARM/musl to help debug this Backport nominations #63508 Do not ICE when synthesizing spans falling inside unicode chars Beta backport accepted Working group sync wg-learning wg-learning&amp;rsquo;s objective is to make the compiler easier to learn by ensuring that rustc-guide and api docs are &amp;ldquo;complete&amp;rdquo;.
Currently they&amp;rsquo;re working on:
Getting video lectures about parts of the compiler from people who know them Turning existing video lectures into content for the rustc-guide Triaging and working on issues and pull requests for learning content Help is always wanted!</description></item><item><title>2019.08.29</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-08-29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-08-29/</guid><description>2019-08-29 Volunteers wanted We&amp;rsquo;ve had a few issues recently related to upgrading LLVM. We&amp;rsquo;d like to create a new working group which will focus on fixing ICEs and miscompilations caused by LLVM. Backport nominations Account for doc comments coming from proc macros without spans #63930
Accepted for beta backport fix nounwind attribute logic #63909
Declined for beta backport Fix nested eager expansions in arguments of format_args #63717</description></item><item><title>2019.09.05</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-09-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-09-05/</guid><description>2019-09-05 Volunteers wanted Backport nominations Update xLTO compatibility table in rustc book #64092
Approved for beta backport Support &amp;ldquo;soft&amp;rdquo; feature-gating using a lint #64066
Approved for beta backport pprust: Do not print spaces before some tokens #63897
Approved for beta backport Working group sync No working group sync this week.</description></item><item><title>2019.09.12</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-09-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-09-12/</guid><description>2019-09-12 Volunteers wanted We are looking for someone with access to an arm/musl system to help troubleshoot #60297 Backport nominations Update LLVM submodule #64317
Approved for beta backport fix nounwind attribute logic #63909
No conclusion reached yet. We&amp;rsquo;ll revisit next week. pprust: Do not print spaces before some tokens #63897
Approved for beta backport Working group sync wg-polonius After a long hiatus, this working group is being rebooted with a focus on expanding Polonius coverage to include initialization checking and region subtyping in addition to borrow checking.</description></item><item><title>2019.09.19</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-09-19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-09-19/</guid><description>2019-09-19 Volunteers wanted &amp;ldquo;Better error message when attempting to instantiate tuple structs with private fields&amp;rdquo; #58017 Volunteer wanted to bisect this issue. Backport nominations &amp;ldquo;fn ptr is structural match&amp;rdquo; #64431
Accepted for beta backport &amp;ldquo;fix nounwind attribute logic&amp;rdquo; #63909
Declined for beta backport Working group sync wg-self-profile Three main things being worked on:
Getting the &amp;ldquo;minimum viable product&amp;rdquo; done as planned #58967</description></item><item><title>2019.09.26</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-09-26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-09-26/</guid><description>2019-09-26 Volunteers wanted Help wanted: proc-macro param attrs dropping first attrs in impl fns #64682
Help wanted: error: internal compiler error: unexpected panic: inconsistent resolution for a macro #64803
Backport nominations Fix #64744. Account for the Zero sub-pattern case. #64748
Approved for beta backport Rustdoc render async function re-export #64599
Approved for beta backport Working group sync wg-traits wg-traits is spinning back up and has a number of projects currently being worked on:</description></item><item><title>2019.09.30-planning</title><link>https://rust-lang.github.io/compiler-team/working-groups/parallel-rustc/minutes/2019.09.30-planning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/parallel-rustc/minutes/2019.09.30-planning/</guid><description>2019.09.30 Planning Meeting Zulip topic.
Roadmap Sequential overhead Rerun perf benchmark with -j1 (but not limiting parallel codegen) and identify hotspots Identify cases one by one and optimize Overly fine-grained locking risks subtle ordering or dead-lock bugs Solution: audit Poor jobserver integration leading to overall poor scaling Little public testing of correctness and performance Call for permance testing, asking for data with -Ztimings requires us to have easy builds available, perhaps?</description></item><item><title>2019.10.10</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-10-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-10-10/</guid><description>2019-10-10 Announcements @centril is splitting libsyntax into data and logic parts which will decrease the amount of code librustc depends on.
@nagisa a cross-platform version of stacker which will allow us to avoid stack overflows in rustc.
There is a compiler team design meeting scheduled for tomorrow (2019-10-11) to discuss some of @Zoxc&amp;rsquo;s PRs.
@pnfelix is revising the code that handles structural match checking.
@nikomatsakis has a PR (#65232) up which helps us get closer to lazy normalization.</description></item><item><title>2019.10.17</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-10-17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-10-17/</guid><description>2017-10-17 Announcements Design meeting on debuginfo strategy tomorrow (2019-10-18) on Zulip.
The traits working group had a design meeting yesterday on lazy normalization.
@nikomatsakis has been looking into lazy normalization specifically for constants and hopes to have some notes to share soon.
The LLVM ICE-breakers working group is nearly ready to go live.
@spastorino has nearly finished interning Place projections. PR 1, PR2
@centril is continuing to work on splitting libsyntax apart</description></item><item><title>2019.10.24</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-10-24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-10-24/</guid><description>2019-10-24 Announcments @simulacrum landed the rustc-dev split PR which decreases the size of the rustc-dev rustup component #65474 Backport nominations Avoid ICE when adjusting bad self ty #65755
Accepted for beta and stable backport Avoid ICE when checking Destination of break inside a closure #65518
Accepted for beta and stable backport save-analysis: Nest tables when processing impl block definitions #65511
Accepted for beta backport save-analysis: Don&amp;rsquo;t ICE when resolving qualified type paths in struct members #65353</description></item><item><title>2019.10.31</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-10-31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-10-31/</guid><description>2019-10-31 Announcments Rust 1.39 ships on Thursday!
Backport nominations &amp;ldquo;save-analysis: Account for async desugaring in async fn return types&amp;rdquo; #65936
Accepted for beta backport &amp;ldquo;resolve: Turn the &amp;ldquo;non-empty glob must import something&amp;rdquo; error into a lint&amp;rdquo; #65539
Accepted for beta backport Working group sync wg-pgo PGO is available in the stable compiler. Docs are in the rustc-guide and the rustc-book
Unfortunately we don&amp;rsquo;t observe significant performance gains from applying it (except for tiny synthetic test cases).</description></item><item><title>2019.11.07</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-11-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-11-07/</guid><description>2019-11-07 Announcments @pnkfelix is moving to the US and will be working in the Eastern timezone.
@wesleywiser has been working on the constant propagation pass and wants to turn it on for debug &amp;amp; release builds to improve compilation time.
Rust 1.39 has shipped with async/await support and other goodies.
Backport nominations Do not ICE with a precision flag in formatting str and no format arguments #66093 Approved for beta &amp;amp; stable backport.</description></item><item><title>2019.11.14</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-11-14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-11-14/</guid><description>2019-11-14 Announcements Request for assistance: &amp;ldquo;Rustc panics (NoSolution): could not prove Binder(projection soup)&amp;rdquo; #65581
Request for assistance: &amp;ldquo;Rust 1.38 regressions weren&amp;rsquo;t fully triaged&amp;rdquo; #65577
Request for assistance: &amp;ldquo;Miscompilation with target-cpu=znver1 (AMD Ryzen 1000&amp;frasl;2000 series) on Windows + LLVM 9.&amp;rdquo; #63959
@cjgillot replaced a lot of TypeFoldable impls with a derive #66384
The Infra team has finished evaluating GitHub Actions and we&amp;rsquo;re switching!
This will have a signficant, positive impact on CI build time.</description></item><item><title>2019.11.21</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-11-21/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-11-21/</guid><description>2019-11-21 Announcements perf.rust-lang.org is switching to a new benchmarking server so all of the old data is being removed to avoid skewed comparisons.
The constant propagation MIR optimization pass is on by default which provides some improvements to debug and release compile times.
@pnkfelix wrote a blog post about minimizing rustc bugs.
Backport nominations &amp;ldquo;Do not ICE on trait aliases with missing obligations” #66392</description></item><item><title>2019.11.28</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-11-28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-11-28/</guid><description>2019-11-28 Announcements perf.rust-lang.org has been fully migrated to the new server for benchmarking.
GitHub Actions is now running both Windows and Linux workloads!
Backport nominations &amp;ldquo;Handle non_exhaustive in borrow checking&amp;rdquo; #66722
Accepted for beta backport &amp;ldquo;Fix some issues with attributes on unnamed fields&amp;rdquo; #66669
Accepted for beta backport Working group sync wg-diagnostics Work is proceeding slowly on the out-of-tree diagnostic rendering.</description></item><item><title>2019.12.05</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-12-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-12-05/</guid><description>2019-12-05 Announcements @centril is working on a major refactoring of the expression, statement, and item parsers in librustc_parse
@eddyb landed [#56231] which unblocks optimizing MIR while preserving debuginfo for variables.
Backport nominations &amp;ldquo;E0023: handle expected != tuple pattern type&amp;rdquo; #67044
Approved for beta backport &amp;ldquo;Fix some issues with attributes on unnamed fields&amp;rdquo; #66669
Approved for beta &amp;amp; stable backport &amp;ldquo;Do not ICE in if without else in async fn&amp;rdquo; #66391</description></item><item><title>2019.12.12</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-12-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-12-12/</guid><description>2019-12-12 Announcements @pnkfelix posted an RFC about future-incompat lints RFC 2834
@eddyb landed some additional caching for trait selection which gives some nice speedups #66821
Const eval now has support for if/match and a PR for loop/while is open.
@eddyb is resurrecting their SROA MIR optimization #48300
Backport nominations resolve: Always resolve visibilities on impl items #67236
Approved for beta backport resolve: Resolve visibilities on fields with non-builtin attributes #67106</description></item><item><title>2019.12.19</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-12-19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-12-19/</guid><description>2019-12-19 Announcements @pnkfelix has moved back to the USA
There will be a new Rust release by end-of-day
@michaelwoerister has a PR up that adds support for recording query-keys during a -Z self-profile session #67397
@matthewjasper and @wesleywiser have been asked to join the compiler team as full members and both have accepted
@centril is working on a stabilization report for sub-slice patterns
Backport nominations Don&amp;rsquo;t suppress move errors for union fields #67314</description></item><item><title>2020.01.02</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2020-01-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2020-01-02/</guid><description>2020-01-02 Announcements Happy new year!
@centril has a PR to extract rustc_hir from rustc #67803
@centril and @matthewjasper have written a stabilization report for slice_patterns #67712
Backport nominations Do not ICE on lifetime error involving closures #67687
Approved for beta backport Treat extern statics just like statics in the “const pointer to static” representation #67630
Deferred until next week Use the correct type for static qualifs #67621</description></item><item><title>2020.01.09</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2020-01-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2020-01-09/</guid><description>2020-01-09 Announcements Lots of activity happening on const generics &amp;amp; lazy normalization For example, #67890 by @benlewis Beta nominations Do not ICE on lifetime error involving closures #67687
Approved for stable &amp;amp; beta backport Treat extern statics just like statics in the &amp;ldquo;const pointer to static&amp;rdquo; representation #67630
Approved for beta backport Use the correct type for static qualifs #67621</description></item><item><title>2020.01.23</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2020-01-23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2020-01-23/</guid><description>2020-01-23 Announcements No compiler team design meeting tomorrow, it has been rescheduled for Feb 7. We&amp;rsquo;ll be discussing &amp;ldquo;parser library-ification&amp;rdquo;.
The next Rust release is scheduled for Jan 30 (one week away). The tools &amp;ldquo;no breakage week&amp;rdquo; started yesterday in preperation for the release.
Backport nominations Do not ICE on malformed suggestion spans #68256
Approved for beta backport. Revert parts of #66405 #67471</description></item><item><title>2020.02.06</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2020-02-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2020-02-06/</guid><description>2020-02-06 Announcements There is a design meeting this Friday (2020-02-07) on parser-librarification.
@davidtwco has made progress on the polymorphization effort and has posted a status update.
@mw has posted a major change proposal to make incremental compilation respect the -Ccodegen-units setting.
Cargo report future-incompat rfc#2834 is on track to get an FCP merge request from the cargo team in the near future.
Backport nominations Correct ICE caused by macros generating invalid spans #68611</description></item><item><title>2020.02.13</title><link>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2020-02-13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2020-02-13/</guid><description>2020-02-13 Backport nominations Correct ICE caused by macros generating invalid spans #68611
Approved for stable &amp;amp; beta backport Fix extra subslice lowering #69128
Approved for beta backport Working group sync wg-polymorphization @davidtwco writes:
Since this is the first update to the compiler team meeting, this working group is my work for my master&amp;rsquo;s thesis - it aims to implement an analysis to detect when functions could remain polymorphic during code generation.</description></item><item><title>Call for participation</title><link>https://rust-lang.github.io/compiler-team/procedures/call-for-participation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/procedures/call-for-participation/</guid><description>Call for participation One way to get help with a project is to issue a call for participation on the dedicated internals thread.
Such calls should follow this (very simple) template, so as to help clarify what&amp;rsquo;s going on:
- **Title:** Investigate #123141 - **Experience level expected:** (Newcomer | Contributor | Experienced) - **Urgency:** (ASAP | over next few months | whenever) - **Contact:** @your-name-here in [the #your-stream-here stream on Zulip][z] [z]: https://rust-lang.</description></item><item><title>Chat platform</title><link>https://rust-lang.github.io/compiler-team/about/chat-platform/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/about/chat-platform/</guid><description>The compiler team hangs out primarily in the rust-lang Zulip these days. The #t-compiler/help stream is a great place to ask questions. In addition, each working group has 1 or more streams where they communicate.
You can also find us on the rust-lang Discord, in the #compiler channel.
The #rustc IRC channel on irc.mozilla.org is in a &amp;ldquo;quasi-deprecated&amp;rdquo; status and is not recommended.</description></item><item><title>Code Of Conduct</title><link>https://rust-lang.github.io/compiler-team/about/CODE_OF_CONDUCT/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/about/CODE_OF_CONDUCT/</guid><description>The Rust Code of Conduct A version of this document can be found online.
Conduct Contact: rust-mods@rust-lang.org
We are committed to providing a friendly, safe and welcoming environment for all, regardless of level of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other similar characteristic. On IRC, please avoid using overtly sexual nicknames or other nicknames that might detract from a friendly, safe and welcoming environment for all.</description></item><item><title>Compiler Team Contributors</title><link>https://rust-lang.github.io/compiler-team/working-groups/meta/rfc-drafts/compiler-team-contributors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/meta/rfc-drafts/compiler-team-contributors/</guid><description>Compiler Team Contributors Feature Name: (fill me in with a unique ident, my_awesome_feature) Start Date: (fill me in with today&amp;rsquo;s date, YYYY-MM-DD) RFC PR: rust-lang/rfcs#0000 Rust Issue: rust-lang/rust#0000 Summary Introduce an intermediate level of member for the compiler team, the compiler team contributor.
Motivation This proposal is part of a larger effort to introduce more structure into the compiler team&amp;rsquo;s makeup. This structure should make it easier to become a part of the compiler team, by laying out a clear path to membership and by offering more official roles.</description></item><item><title>Debugging Support</title><link>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-10-18-debuginfo-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-10-18-debuginfo-meeting/</guid><description>Debugging Support in the Compiler Zulip stream or read on the Zulip archive The problems https://github.com/rust-lang/rust/issues/64343
We have bugs with debuginfo that are causing broad pain for people who use x.py test, but we do not have dedicated developers who own maintenance of debugger support.
https://github.com/rust-lang/rust/pull/60826
We have Pull Requests to improve our debuginfo support, but we do not have dedicated developers who own maintenance of debugger support.</description></item><item><title>Dep-graph loading (#62083)</title><link>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-10-11-DepGraph-persistence-PR62038/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-10-11-DepGraph-persistence-PR62038/</guid><description>design meeting 2019-10-11 Zulip stream
introduction Dear @T-compiler/meeting,
Today we will be having a design meeting. The topic was originally sketched as &amp;ldquo;some Zoxc PR&amp;rdquo;. We&amp;rsquo;ve since narrowed that down to discuss #62038, which is a refactoring to how dep-graph loading occurs. @Zoxc wrote up a comment giving a summary of the ideas. Note that this PR itself is an incremental step towards #60035, which aims to make dep-graph loading/saving more continuous.</description></item><item><title>FAQs</title><link>https://rust-lang.github.io/compiler-team/working-groups/diagnostics/FAQ/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/diagnostics/FAQ/</guid><description>Frequently Asked Questions (FAQ) If you have a question, feel free to file an issue or ask in the working group&amp;rsquo;s Zulip stream.
There are no FAQs so far. Please ask us more questions.</description></item><item><title>FAQs</title><link>https://rust-lang.github.io/compiler-team/working-groups/learning/FAQ/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/learning/FAQ/</guid><description>Frequently Asked Questions (FAQ) If you have a question, feel free to file an issue or ask in the working group&amp;rsquo;s Zulip stream.
There are no FAQs so far. Please ask us more questions.</description></item><item><title>FAQs</title><link>https://rust-lang.github.io/compiler-team/working-groups/llvm/FAQ/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/llvm/FAQ/</guid><description>Frequently Asked Questions (FAQ) Looks like no questions have been asked yet! If you have a question, feel free to file an issue or ask in the working group&amp;rsquo;s Zulip stream.</description></item><item><title>FAQs</title><link>https://rust-lang.github.io/compiler-team/working-groups/meta/FAQ/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/meta/FAQ/</guid><description>Frequently Asked Questions (FAQ) Looks like no questions have been asked yet! If you have a question, feel free to file an issue or ask in the working group&amp;rsquo;s Zulip stream.</description></item><item><title>FAQs</title><link>https://rust-lang.github.io/compiler-team/working-groups/mir-opt/FAQ/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/mir-opt/FAQ/</guid><description>Frequently Asked Questions (FAQ) If you have a question, feel free to file an issue or ask in the working group&amp;rsquo;s Zulip stream.
Is this working group optimizing the MIR of functions or the MIR-datastructures? Yes
Why is the above answer so short? We&amp;rsquo;re doing both. MIR-datastructures are mostly restructured where necessary to make more optimizations possible.</description></item><item><title>FAQs</title><link>https://rust-lang.github.io/compiler-team/working-groups/nll/FAQ/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/nll/FAQ/</guid><description>Frequently Asked Questions (FAQ) If you have a question, feel free to file an issue or ask in the working group&amp;rsquo;s Zulip stream.
What is the relationship to Polonius? Polonius is an experimental, &amp;ldquo;next generation&amp;rdquo; NLL implementation, initially described in [this blog post][polonius]. Enabling the use of Polonius is not in scope for the NLL working group &amp;ndash; see [the polonius working group][../polonius].</description></item><item><title>FAQs</title><link>https://rust-lang.github.io/compiler-team/working-groups/parallel-rustc/FAQ/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/parallel-rustc/FAQ/</guid><description>Frequently Asked Questions (FAQ) Looks like no questions have been asked yet! If you have a question, feel free to file an issue or ask in the working group&amp;rsquo;s Zulip stream.</description></item><item><title>FAQs</title><link>https://rust-lang.github.io/compiler-team/working-groups/pgo/FAQ/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/pgo/FAQ/</guid><description>Frequently Asked Questions (FAQ) Looks like no questions have been asked yet! If you have a question, feel free to file an issue or ask in the working group&amp;rsquo;s Zulip stream.</description></item><item><title>FAQs</title><link>https://rust-lang.github.io/compiler-team/working-groups/pipelining/FAQ/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/pipelining/FAQ/</guid><description>Frequently Asked Questions (FAQ) Looks like no questions have been asked yet! If you have a question, feel free to file an issue or ask in the working group&amp;rsquo;s Zulip stream.</description></item><item><title>FAQs</title><link>https://rust-lang.github.io/compiler-team/working-groups/polonius/FAQ/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/polonius/FAQ/</guid><description>Frequently Asked Questions (FAQ) Looks like no questions have been asked yet! If you have a question, feel free to file an issue or ask in the working group&amp;rsquo;s Zulip stream.</description></item><item><title>FAQs</title><link>https://rust-lang.github.io/compiler-team/working-groups/rfc-2229/FAQ/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/rfc-2229/FAQ/</guid><description>Frequently Asked Questions (FAQ) Looks like no questions have been asked yet! If you have a question, feel free to file an issue or ask in the working group&amp;rsquo;s Zulip stream.</description></item><item><title>FAQs</title><link>https://rust-lang.github.io/compiler-team/working-groups/rls-2.0/FAQ/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/rls-2.0/FAQ/</guid><description> Frequently asked questions</description></item><item><title>FAQs</title><link>https://rust-lang.github.io/compiler-team/working-groups/self-profile/FAQ/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/self-profile/FAQ/</guid><description>Frequently Asked Questions (FAQ) Looks like no questions have been asked yet! If you have a question, feel free to file an issue or ask in the working group&amp;rsquo;s Zulip stream.</description></item><item><title>FAQs- Template</title><link>https://rust-lang.github.io/compiler-team/working-groups/template/FAQ/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/template/FAQ/</guid><description>This page is an example template and not the actual NLL working group.
Frequently Asked Questions (FAQ) Looks like no questions have been asked yet! If you have a question, feel free to file an issue or ask in the working group&amp;rsquo;s Zulip stream.</description></item><item><title>Forming a new working group</title><link>https://rust-lang.github.io/compiler-team/procedures/form-new-working-group/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/procedures/form-new-working-group/</guid><description>Forming a new working group So, you would like to form a working group?
Step 0. What is a working group? Working groups are the basic way that the compiler team tracks what is going on. If you are doing some sort of task that the compiler team will want to track over time, then it makes sense to form a working group, even if you don&amp;rsquo;t plan to be getting more people involved.</description></item><item><title>Learning WG 2019-05-14 sync meeting</title><link>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/2019.05.14-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/2019.05.14-meeting/</guid><description>Learning WG 2019-05-14 sync meeting Topics discussed: Define what’s the walkthrough section we want to add Triage missing rustc-guide chapters How do we want to keep track of who is doing what? Does github Projects works nice for this? Plan for walkthrough/overview chapter Goal is to have a chapter which will walk through compilation of simple program Links to other chapters for details This overview differs from the existing queries chapter in that the latter is more focused on how to create your own queries.</description></item><item><title>Learning WG 2019-05-28 sync meeting</title><link>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/2019.05.28-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/2019.05.28-meeting/</guid><description>Learning WG 2019-05-28 sync meeting Triaging rustc-guide repo Some discussion about how to assign issues on the rust-lang/rustc-guide repo Problem: can&amp;rsquo;t assign issues to non-members Possible solutions: Add WG-learning members to repo so they can be assigned use triagebot model: bot is assigned the issue and edits the OP to mention the current owner. Forge Discussed purpose of the forge and how it differs from rustc-guide Niko feels that most of the content in the forge doesn&amp;rsquo;t obviously belong in the guide and that the stuff currently in the guide feels like it belongs in the guide Forge is for team procedures, infra stuff would also be good to add craterbot and rustc-timer links to forge (probably link to READMEs of their repos) link forge from main page my rule of thumb [for what to put in the guide] is sort of &amp;ldquo;is this something you would do while fixing a compiler bug or implementing a compiler feature&amp;rdquo; -niko</description></item><item><title>Learning WG 2019-06-11 sync meeting</title><link>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/2019.06.11-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/2019.06.11-meeting/</guid><description>Learning WG 2019-06-11 sync meeting WIP stuff Write an overview chapter (lokalmatador)
Steady progress, about to finish up the part on HIR and moving on to MIR Changed the example to bubblesort in the meantime using some mutable borrows Stick to old trait solver for now, according to Niko Draft/WIP: https://paper.dropbox.com/doc/A-first-glance-at-rustc--AexZRkGI1D_0C_eqE5ZBqmgjAQ-Mk45wFbBKBT9C8e9rPaCd Transcribe the Compiler Lecture Series into chapters
amanjeev: debugging support Merge what we have and iterate Needs to be reviewed juanbono: coherence in chalk Working with igaray igaray: representing types in rustc No progress, but have not dropped it Add rustc guide to toolstate (mark-i-m)</description></item><item><title>Learning WG 2019-06-25 sync meeting</title><link>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/2019.06.25-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/2019.06.25-meeting/</guid><description>Learning WG 2019-06-25 sync meeting Helping with mdbook igaray says that doc team has taken up this work and it is not very specific to WG-learning Blog post announcing documentation efforts and tasks, &amp;hellip; It wasn&amp;rsquo;t clear to us where such a post would be published spastorino will check with niko and see if this can be posted on rust blog or if we need some other dev-blog.</description></item><item><title>Learning WG 2019-07-09 sync meeting</title><link>https://rust-lang.github.io/compiler-team/working-groups/diagnostics/minutes/2019.07.09-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/diagnostics/minutes/2019.07.09-meeting/</guid><description>Learning WG 2019-07-09 sync meeting some discussion about organizing lectures on missing topics
it&amp;rsquo;s hard because the preparation may put off potential lecturers maybe instead go for more informal zulip-based &amp;ldquo;explain everything you know about X&amp;rdquo; can then summarize zulip log agreed to change terminology from &amp;ldquo;transcribe&amp;rdquo; -&amp;gt; &amp;ldquo;summarize&amp;rdquo;
mark-i-m volunteers to try to organize meeting with petrochenkov about macros
amanjeev volunteers to try to organize meeting with nagisa or alexchricton about codegen</description></item><item><title>Learning WG 2019-07-09 sync meeting</title><link>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/2019.07.09-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/2019.07.09-meeting/</guid><description>Learning WG 2019-07-09 sync meeting some discussion about organizing lectures on missing topics
it&amp;rsquo;s hard because the preparation may put off potential lecturers maybe instead go for more informal zulip-based &amp;ldquo;explain everything you know about X&amp;rdquo; can then summarize zulip log agreed to change terminology from &amp;ldquo;transcribe&amp;rdquo; -&amp;gt; &amp;ldquo;summarize&amp;rdquo;
mark-i-m volunteers to try to organize meeting with petrochenkov about macros
amanjeev volunteers to try to organize meeting with nagisa or alexchricton about codegen</description></item><item><title>Learning WG 2019-07-23 sync meeting</title><link>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/2019.07.23-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/2019.07.23-meeting/</guid><description>Learning WG 2019-07-23 sync meeting Rustc-guide strike force Need to go through older issues on repo and see what is actionable for each one Easier issues need to just get done Harder issues may need a talk/meeting with an expert
spastorino proposes writing a post on IRLO
mark-i-m volunteers to do this Long meeting Last time, we discussed scheduling a long meeting mark-i-m proposes August 19, but spastorino notes that this is close to RustConf.</description></item><item><title>Learning WG 2019-08-06 sync meeting</title><link>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/2019.08.06-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/2019.08.06-meeting/</guid><description>Learning WG 2019-08-06 sync meeting @Tshepang Lekhonkhobe joined the Learning WG!
@mark-i-m reported that toolslate/linkcheck is now working properly with following overview on how:
The linkchecker in the rust CI is run from https://github.com/rust-lang/rust/tree/master/src/tools/rustbook. It just runs mdbook_linkcheck as a library. That is called by only one linux builder from the script in src/ci/docker/. The hack on the rustc-guide CI checks the output of mdbook_linkcheck from stdout/stderr and looks for timeout errors.</description></item><item><title>Learning WG 2019-08-21 sync meeting</title><link>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/2019.08.20-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/2019.08.20-meeting/</guid><description> Learning WG 2019-08-21 sync meeting It was a fairly quiet meeting.
The 2nd Macros Discussion with @petrochenkov is tomorrow at UTC 7pm. @amanjeev volunteered to be added to the toolstate ping list. We decided to leave discussion of other items until more people are present.</description></item><item><title>Learning WG 2019-09-17 sync meeting</title><link>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/2019.09.17-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/2019.09.17-meeting/</guid><description>Learning WG 2019-09-17 sync meeting Team discussed that we all are going to watch same video
This lecture https://github.com/rust-lang/rustc-guide/issues/375 Notes and questions to be discussed in a separate meeting on Tue, 24 September, 15:30 @mark-i-m reported
We are now using mdbook-linkcheck 0.4, which has caching Opening PR https://github.com/rust-lang/rustc-guide/pull/446 to add instructions about fixing toolslate @Iñaki Garay reported that the effort to summarize the videos was underestimated.</description></item><item><title>Learning WG 2019-10-01 sync meeting</title><link>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/2019.10.01-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/2019.10.01-meeting/</guid><description>Learning WG 2019-10-01 sync meeting Team discussed that watching same video by all members, one video at a time, works well for everyone so far
Everyone is taking notes in this paper doc. Discussion was about this lecture https://github.com/rust-lang/rustc-guide/issues/375 @Santiago Pastorino reported that How to build and run guide page needs help
Team might create a new doc for this page to collect ideas. @mark-i-m reported that</description></item><item><title>Learning WG 2019-11-26 planning meeting</title><link>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/2019.11.26-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/2019.11.26-meeting/</guid><description>Learning WG 2019-11-26 planning meeting Team discussed most important missing chapters from the master doc. A consensus was reached which was noted on the master doc. Prioritizing the Overview lecture and doc over others. Working as a team on the lecture/doc. Team discussed to work with Hackmd vs Paper For this Overview doc. So we have experience with Paper as well as Hackmd. Team discussed about Working Process @Santiago mentioned that it might be a good idea to tackle two things in parallel 1.</description></item><item><title>Notes</title><link>https://rust-lang.github.io/compiler-team/working-groups/diagnostics/NOTES/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/diagnostics/NOTES/</guid><description> Diagnostics Meeting Notes 2019-05-24 zulip link We triaged all P-medium A-diagnostics issues We figured out a first action for getting annotate-snippets into rustc: https://github.com/rust-lang/rust/issues/59346 We have a plan to reduce the boilerplate needed at the diagnostic emitter site: https://github.com/rust-lang/rust/issues/61132</description></item><item><title>Notes</title><link>https://rust-lang.github.io/compiler-team/working-groups/llvm/NOTES/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/llvm/NOTES/</guid><description>LLVM Meeting Notes No meetings have been held yet.</description></item><item><title>Notes</title><link>https://rust-lang.github.io/compiler-team/working-groups/meta/NOTES/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/meta/NOTES/</guid><description>Meta Meeting Notes This document contains meeting notes from the Meta working group.
2019-02-28: Meeting Written by: @spastorino
What problems do we want to solve from a compiler team member perspective and from a contributor perspective? Help to grow the team by ensuring that we engage people who&amp;rsquo;ve started to get active in rustc? Provide a source of people who can help implement things without needing as much mentoring?</description></item><item><title>Notes</title><link>https://rust-lang.github.io/compiler-team/working-groups/mir-opt/NOTES/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/mir-opt/NOTES/</guid><description>Mir Optimizations (mir-opt) Meeting Notes This document will contain meeting notes from the mir-opt working group.</description></item><item><title>Notes</title><link>https://rust-lang.github.io/compiler-team/working-groups/nll/NOTES/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/nll/NOTES/</guid><description> Non-Lexical Lifetimes (NLL) Meeting Notes This document contains meeting notes from the NLL working group.
2019-02-19: Agenda: Meta: What should this meeting be for? Sync-up regarding Place 2.0 (#52708) Status Updates (TBD) 2019-02-13: Status updates matthewjasper Opened #58347 to fix issues around closures Got #57609 (match rework) ready for review Opened #58353 spastorino Worked on #52708 pnkfelix Looked a bit at #52708 after assisting spastorino with it lqd: continued on #57374 davidtwco: merged #58161</description></item><item><title>Notes</title><link>https://rust-lang.github.io/compiler-team/working-groups/parallel-rustc/NOTES/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/parallel-rustc/NOTES/</guid><description>This working group hasn&amp;rsquo;t had any meetings yet.
parallel-rustc Meeting Notes This document contains meeting notes from the parallel-rustc working group.</description></item><item><title>Notes</title><link>https://rust-lang.github.io/compiler-team/working-groups/pgo/NOTES/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/pgo/NOTES/</guid><description>Profile-Guided Optimization Meeting Notes This document contains meeting notes from the PGO working group.
WG Status Update - 2019/03/28 https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/weekly.20meeting.202019-03-28.20.2354818/near/161957622</description></item><item><title>Notes</title><link>https://rust-lang.github.io/compiler-team/working-groups/pipelining/NOTES/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/pipelining/NOTES/</guid><description>Pipelining Meeting Notes Video 2019-04-05 @alexcrichton and @nnethercote met on video for ~30m and talked about various aspects of implementing pipelining in the compiler.
What are metadata/rlibs? First we talked a bit about what are rlibs/metadata files and how is this all going to be put together. The recap is:
Rustc can produce metadata files (--emit metadata). These metadata files are like header files for Rust crates. They&amp;rsquo;re internally a compiler-specific binary format and cannot be inspected.</description></item><item><title>Notes</title><link>https://rust-lang.github.io/compiler-team/working-groups/rls-2.0/NOTES/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/rls-2.0/NOTES/</guid><description>2019-02-20 Notes from &amp;ldquo;Design of syntax trees&amp;rdquo; meeting Zulip stream
We haven&amp;rsquo;t nailed down the exact design, but we&amp;rsquo;ve covered the design space a bit, and formulated interesting questions to evaluate designs:
What are the requirements of IDEs? Full-fidelity trees, &amp;ldquo;common super type&amp;rdquo; of nodes for bottom-up traversals. Should queries reach inside of the syntax tree? In general, how incremental computation works with syntax trees? Offsets are bad for incremental (change a lot), parent pointers are bad for incremental (give access to too much context).</description></item><item><title>Notes</title><link>https://rust-lang.github.io/compiler-team/working-groups/self-profile/NOTES/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/self-profile/NOTES/</guid><description>Self-Profile Meeting Notes This document contains meeting notes from the self-profile working group.
2019-03-05: Meeting Written by: @wesleywiser
Purpose of meeting: Initial meeting to get organized and decide on some next steps.
Agenda: - Current status update - Where to track work? - What does an Minimum Viable Product (MVP) look like? - Next work items?
Current Status After a few rounds of experimentation, we have a -Z self-profile option available in the nightly compliler.</description></item><item><title>Notes - Templates</title><link>https://rust-lang.github.io/compiler-team/working-groups/template/NOTES/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/template/NOTES/</guid><description>This page is an example template and not the actual NLL working group.
Feel free to break this out into a directory.
Non-Lexical Lifetimes (NLL) Meeting Notes This document contains meeting notes from the NLL working group.
2019-02-22: Triage Meeting Written by: @davidtwco
Purpose of meeting: Given slow winding down of the NLL working group, discussed the ongoing purpose of the meeting. @spastorino suggested using the time as an space for open discussion and office hours (as previously suggested by @pnkfelix).</description></item><item><title>Place Interning</title><link>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-09-27-place-interning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-09-27-place-interning/</guid><description>Place projection interning meeting 2019-09-27 Zulip stream
Ideas to pursue at some later point or in parallel removing the field from the projections get rid of static from PlaceBase I (oli-obk) think this would be good to pursue ealier than later since it&amp;rsquo;ll just eliminate an annoying piece that we don&amp;rsquo;t really care about most of the time intern entire places at the MIR level interning (base, Vec&amp;lt;projection&amp;gt;) means less re-use overall though nice hack: rfirst 128 (eddyb suggests 2^16) locals or so can be mapped to themselves could even be extended for whatever the most common projections are if that proves useful insert gratuitous reference to random compression methods here Ideas rejected intern the Vec&amp;lt;Projection&amp;gt; to a &amp;amp;[Projection] Rejected: List is better because it is smaller, and we can use a PlaceRef for cases where you want to do subslicing Although &amp;amp;[Projection] would mean that a.</description></item><item><title>Planning the gcx, tcx transition</title><link>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-06-21-the-gcx-tcx-transition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-06-21-the-gcx-tcx-transition/</guid><description>Planning the &#39;gcx, &#39;tcx transition Zulip thread Summary Discuss the end-state for tcx Plan the steps we will take to get there and time frame Motivation Now that we have removed the per-inference context interners, we plan to transition the compiler to a different naming scheme. This is a major shift and something we should plan carefully.
Also, it&amp;rsquo;s an opportunity to consider an alternate naming scheme &amp;ndash; tcx and &#39;tcx is not known to be particularly popular.</description></item><item><title>Read-Eval-Print-Loop (REPL) Extensions</title><link>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-11-29-repl-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-11-29-repl-meeting/</guid><description>Zulip stream or read on the Zulip archive. Agenda Design doc: https://hackmd.io/GJokfI0wQ0i4SIgRbFTmfw
Big picture overview and questions
Essential changes to support REPL extensions
Big picture overview of design, and on-the-fly questions about it Read (to an AST), Compile (AST to MIR), Eval (the MIR to a value), Print (the value). and Loop. Question: Is this going to be a tool analogous to miri, where check-in&amp;rsquo;s that break it may not break CI immediately, but rather will just file follow-up bugs?</description></item><item><title>Roadmap 2020</title><link>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-10-04-Roadmap-2020-Goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-10-04-Roadmap-2020-Goals/</guid><description>Roadmap 2020 Compiler Discussion Zulip topic
2019 roadmap (for reference) The compiler team has five main themes of work for this year:
Improving &amp;ldquo;core strength&amp;rdquo; by lowering raw compilation times and also generating better code (which in turn can help with compilation times) Improved IDE integration, including support for typed completions Extracting parts of rustc into libraries, which are easier to understand and maintain but also help in developing a Rust specification Supporting lang team in key feature development, such as around async fn support, or improvements to the trait system Improving our documentation and organization, helping to make it clearer what is going on at any given time, and how people can get involved.</description></item><item><title>Steering meeting</title><link>https://rust-lang.github.io/compiler-team/about/steering-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/about/steering-meeting/</guid><description>Steering Meeting The compiler steering meeting is the place for high-level discussion and planning. The meeting takes place weekly. The topics of the meeting are selected at periodic planning meetings. See the steering meeting procedure for more details. See #58850 for more information.
See the compiler team calendar for the topics of the next scheduled meetings. There is also a dedicated internals thread.
The steering meeting takes place on Zulip.</description></item><item><title>Steering meeting</title><link>https://rust-lang.github.io/compiler-team/procedures/steering-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/procedures/steering-meeting/</guid><description>Steering meeting This content has moved to the Rust forge.</description></item><item><title>Target Tier Policy</title><link>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-09-20-target-tier-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-09-20-target-tier-policy/</guid><description>Target Tier Policy Zulip thread Proposal issue: rust-lang/rust#166 Original proposal with history Summary We should have an official, objective policy for adding new (tier 3) targets, and for raising targets to tier 2 (with rustup builds) or even tier 1.
Conclusion: Josh to revise policy based on feedback (done, see below) and subsequently submit as an RFC.
Motivation Rust developers regularly implement new targets in the Rust compiler, and reviewers of pull requests for such new targets would like a clear, consistent policy to cite for accepting or rejecting such targets.</description></item><item><title>Third Party out of tree crates</title><link>https://rust-lang.github.io/compiler-team/procedures/crates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/procedures/crates/</guid><description>Third-party and out-of-tree crates This document describe the guidelines for creating out-of-tree crates for use in the compiler and using third-party crates within the compiler. These guidelines were originally discussed at the Rust All Hands 2019 by the compiler team and others; and then at the 01/03/2019 steering meeting.
Out-of-tree crates One of the primary goals of this policy is to ensure that there is consistency in how out-of-tree crates used in the compiler are set up (at least, those maintained by the compiler team and living in rust-lang) and that the experience is uniform across rust-lang/rust and these crates.</description></item><item><title>Triage Meeting</title><link>https://rust-lang.github.io/compiler-team/about/triage-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/about/triage-meeting/</guid><description>Triage Meeting The compiler triage meeting is the place for tracking regressions, progress on urgent bugs and checking-in with the compiler team&amp;rsquo;s working groups. Each meeting, two working groups (rotating) check-in with their progress and blockers.
The meeting takes place every week. See the compiler team calendar for the next scheduled meeting (normally weekly).
The triage meeting takes place on Zulip. Look for a topic like &amp;ldquo;#54818 weekly meeting YYYY-MM-DD&amp;rdquo; or &amp;ldquo;weekly meeting YYYY-MM-DD&amp;rdquo; (with the proper date, of course).</description></item><item><title>Triage Working Group Discussion</title><link>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-07-08-triage-wg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-07-08-triage-wg/</guid><description>Triage Working Group Discussion Zulip thread Summary Discussed ideas of a triage working group and how that might interact Discussed pnkfelix/nikomatsakis taking leave over next few weeks and what to do in the meantime Discussed the problems around review queues pnkfelix/nikomatsakis absence pnkfelix will be going on parental leave for 2 months starting July 15. nikomatsakis will be on PTO for a month or so, with limited availability.</description></item><item><title>Triage meeting on 2019-02-24</title><link>https://rust-lang.github.io/compiler-team/working-groups/traits/minutes/triage-2019-02-24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/traits/minutes/triage-2019-02-24/</guid><description>Triage meeting on 2019-02-24 Info Zulip thread.
Summary The goal of the meeting was to try and figure out, in somewhat more detail, how we want to organize the traits working group itself. We&amp;rsquo;ve been doing work on enumerating and triaging the set of things we hope to do, but in this meeting we were basically trying to come up with some concrete next steps.
Ultimately we identified the following next steps:</description></item><item><title>Triage meeting on 2019-03-04</title><link>https://rust-lang.github.io/compiler-team/working-groups/traits/minutes/triage-2019-03-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/traits/minutes/triage-2019-03-04/</guid><description>Triage meeting on 2019-03-04 Info Zulip thread.
Summary We followed up on the goals from last time.
Lifetime problems around async-await We discussed how we found a way to resolve the async fn complications by changing the async fn desugaring, and hence don&amp;rsquo;t need any deep trait action. We are still interested in trying to find a way to solve the &amp;ldquo;captures problem&amp;rdquo; for impl Trait, however, and alexreg and nikomatsakis may do some follow-up there.</description></item><item><title>Triage meeting on 2019-03-11</title><link>https://rust-lang.github.io/compiler-team/working-groups/traits/minutes/triage-2019-03-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/traits/minutes/triage-2019-03-11/</guid><description>Triage meeting on 2019-03-11 Info Zulip thread
Help wanted! nikomatsakis is looking for someone to help with investigating lazy normatlization. The task would be to experimentally modify rustc and is best suited to someone already vaguely familiar with the Rust query system etc. See below. Summary We followed up on the goals from last time.
Lazy normalization and const generics Link
Last week, nikomatsakis did more investigation, taking notes in this dropbox paper document.</description></item><item><title>Unify Dataflow Frameworks (#202)</title><link>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-11-09-unified-dataflow-framework/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-11-09-unified-dataflow-framework/</guid><description>Design Meeting 2019-11-08 Zulip Stream
Agenda Design doc: https://hackmd.io/@39Qr_z9cQhasi25sGjmFnA/Skvd9rztS
Explain the current state of things
We currently have two wholly separate APIs for dataflow, one for bit-vector problems and one that allows arbitrary transfer functions but still restricts the lattice to a powerset of indices. I want to merge these two to make code more DRY. The prototype implementation is described pretty thoroughly in the design doc, but maybe go over it a bit?</description></item><item><title>WG learning future meeting agenda</title><link>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/agenda/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/learning/minutes/agenda/</guid><description>WG-Learning future meeting agenda See this doc</description></item><item><title>WG-Polonius meeting minutes 2019.04.23</title><link>https://rust-lang.github.io/compiler-team/working-groups/polonius/minutes/2019.04.23-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/polonius/minutes/2019.04.23-meeting/</guid><description>WG-Polonius meeting minutes: 2019/04/23 Relevant links:
The meeting happened in this Zulip thread A Paper document for the WIP roadmap In this meeting, we started with a short review of the previous week&amp;rsquo;s work:
Albin continued work on implementing liveness in Polonius, and finalized #105, which is now ready to be merged into a new polonius-engine release. Niko wrote up notes describing the second part of the liveness effort: modifying rustc to emit var_used and var_defined facts for the previous PR.</description></item><item><title>WG-Polonius meeting minutes 2019.04.30</title><link>https://rust-lang.github.io/compiler-team/working-groups/polonius/minutes/2019.04.30-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/polonius/minutes/2019.04.30-meeting/</guid><description>WG-Polonius meeting minutes: 2019/04/30 Relevant links:
The meeting happened in this Zulip thread. The WIP Roadmap Paper. In this meeting, we started with a short review of the previous week&amp;rsquo;s work:
Albin continued work on implementing liveness in Polonius, and opened the rustc part of this work: generating the facts needed by the Polonius computation. Niko wrote up some more notes on continuing the liveness work: the next major part being computing the region_live_at facts in Polonius analyses instead of rustc.</description></item><item><title>WG-Polonius meeting minutes 2019.05.07</title><link>https://rust-lang.github.io/compiler-team/working-groups/polonius/minutes/2019.05.07-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/polonius/minutes/2019.05.07-meeting/</guid><description>WG-Polonius meeting minutes: 2019/05/07 Relevant links:
The meeting happened in this Zulip thread. The WIP Roadmap Paper. In this shorter meeting, we spent most of the time on the previous week&amp;rsquo;s work:
Niko has written more notes and steps for implementing liveness. With these, most of liveness is described (modulo the specifics of drop) :tada:. Albin smoothly continued work on computing liveness in Polonius in #105, and rustc&amp;rsquo;s #60266: finishing up last week&amp;rsquo;s steps about the beginning of fact generation, and preparing to emit the ones needed to compute the region_live_at relation.</description></item><item><title>WG-Polonius meeting minutes 2019.05.14</title><link>https://rust-lang.github.io/compiler-team/working-groups/polonius/minutes/2019.05.14-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/polonius/minutes/2019.05.14-meeting/</guid><description>WG-Polonius meeting minutes: 2019/05/14 Relevant links:
The meeting happened in this Zulip thread. The WIP Roadmap Paper. A recap of last week&amp;rsquo;s work:
Niko and Albin went through a lot of details of liveness, in the dedicated Zulip thread (around this point). With the previous week&amp;rsquo;s steps, and these conversations, Albin has continued the work on liveness, and is now basically done :tada:. With the 2 PRs, Polonius is able to compute the same region_live_at facts as rustc.</description></item><item><title>WG-Polonius meeting minutes 2019.05.28</title><link>https://rust-lang.github.io/compiler-team/working-groups/polonius/minutes/2019.05.28-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/polonius/minutes/2019.05.28-meeting/</guid><description>WG-Polonius meeting minutes: 2019/05/28 Relevant links:
The meeting happened in this Zulip thread. The WIP Roadmap Paper. This week, we discussed the following topics:
1. Profiling and fact generation @lokalmatador has made some progress on the profiling tasks: WIP branch is here gathering timing data for parts of NLLs and Polonius using rustc&amp;rsquo;s -Z self-profile API.
The granularity of profiling was discussed, especially regarding fact generation and the separation between NLLs and Polonius.</description></item><item><title>WG-Polonius meeting minutes 2019.06.04</title><link>https://rust-lang.github.io/compiler-team/working-groups/polonius/minutes/2019.06.04-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/polonius/minutes/2019.06.04-meeting/</guid><description>WG-Polonius meeting minutes: 2019/06/04 Relevant links:
The meeting happened in this Zulip thread. The WIP Roadmap Paper. This week, we discussed the following topics:
1. Liveness To help with reviewing polonius#105, some last minutes changes were discussed: - the older facts recorded in the Polonius dataset (the inputs directory) needed regenerating. This creates a huge diff for review, so separating those out to be &amp;ldquo;rubberstamped&amp;rdquo; would be interesting.</description></item><item><title>WG-Polonius meeting minutes 2019.06.11</title><link>https://rust-lang.github.io/compiler-team/working-groups/polonius/minutes/2019.06.11-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/polonius/minutes/2019.06.11-meeting/</guid><description>WG-Polonius meeting minutes: 2019/06/11 Relevant links:
The meeting happened in this Zulip thread. The WIP Roadmap Paper. This week, we worked on — and discussed — the following topics:
1. Proposal: stop tracking subset relations along the CFG Niko wrote up an issue with more details about the proposal: issue #107. We also discussed it more in the dedicated zulip thread, around this point.
We made an example where the new refinement would improve on Polonius&amp;rsquo; behaviour: it currently flags an unnecessary error on this example.</description></item><item><title>WG-Polonius meeting minutes, 2019.03.07</title><link>https://rust-lang.github.io/compiler-team/working-groups/polonius/minutes/2019.03.07-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/polonius/minutes/2019.03.07-meeting/</guid><description>WG-Polonius meeting minutes: 2019/03/07 Relevant links:
The meeting happened in this Zulip thread A Paper document for the WIP roadmap The first meeting of the WG Polonius was dedicated to finding concrete next steps, both as part of working on the roadmap, and as onboarding @albins into the group. Since Albin will do a masters related to Polonius, we also worked out other areas they could tackle as time progressed.</description></item><item><title>Working Group Retrospective</title><link>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-11-16-Working-Group-Retrospective/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-11-16-Working-Group-Retrospective/</guid><description>Working Group Retrospective Zulip stream or read on the Zulip archive What you are looking at We did a short survey before the meeting. The following notes were scraped from the 10 responses. I tried to de-duplicate common items. Towards the end, you will find some minutes that were taken during the meeting itself. &amp;ndash;nikomatsakis
Things to KEEP doing Working groups are useful Nice to know who to talk to in order to get involved this was more of a struggle before Providing opportunities for mentorship is good Scoping out small groups of decision makers for &amp;ldquo;in the weeds&amp;rdquo; decisions Weekly updates Dedicated Zulip streams: great to have ability to link/skim, even if most are muted Regular meetings are a good way to keep working groups focused Things to STOP doing Maybe fewer working groups, with more time/energy invested in each?</description></item><item><title>rust-analyzer and libraryification</title><link>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-09-13-rust-analyzer-and-libraryification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-09-13-rust-analyzer-and-libraryification/</guid><description>rust-analyzer and libraryification Zulip thread Proposal issue: rust-lang/rust#160 Additional notes: hackmd document Summary Goal of the meeting is to update on rust-analyzer plans and discuss taking the next step towards extracting &amp;ldquo;standalone libraries&amp;rdquo; that can be shared between rustc and rust-analyzer.
Update on rust-analyzer Rust-analyzer has made big strides and now includes
name resolution a partial type checker preliminary integration with chalk for trait solving as well as a shared lexer with rustc What does library-ification mean?</description></item></channel></rss>